/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkSaleResponse,
  HTTPValidationError,
  InventoryAlertResponse,
  Sale,
  SaleCreate,
  TicketAvailabilityResponse,
  TicketSale,
  TicketSaleCreate,
  TicketSalesHistoryResponse,
  TopItemsResponse,
} from '../models/index';
import {
    BulkSaleResponseFromJSON,
    BulkSaleResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InventoryAlertResponseFromJSON,
    InventoryAlertResponseToJSON,
    SaleFromJSON,
    SaleToJSON,
    SaleCreateFromJSON,
    SaleCreateToJSON,
    TicketAvailabilityResponseFromJSON,
    TicketAvailabilityResponseToJSON,
    TicketSaleFromJSON,
    TicketSaleToJSON,
    TicketSaleCreateFromJSON,
    TicketSaleCreateToJSON,
    TicketSalesHistoryResponseFromJSON,
    TicketSalesHistoryResponseToJSON,
    TopItemsResponseFromJSON,
    TopItemsResponseToJSON,
} from '../models/index';

export interface CheckTicketAvailabilitySalesTicketsEventIdAvailabilityGetRequest {
    eventId: string;
}

export interface CreateBulkSaleSalesBulkSalePostRequest {
    saleCreate: Array<SaleCreate>;
}

export interface GetInventoryAlertsSalesInventoryAlertsEventIdGetRequest {
    eventId: string;
    threshold?: number;
}

export interface GetTicketSalesHistorySalesTicketsEventIdSalesHistoryGetRequest {
    eventId: string;
}

export interface GetTopSellingItemsSalesTopSellingItemsEventIdGetRequest {
    eventId: string;
    limit?: number;
}

export interface SellStockItemSalesStockItemsPostRequest {
    saleCreate: SaleCreate;
}

export interface SellTicketsSalesTicketsPostRequest {
    ticketSaleCreate: TicketSaleCreate;
}

/**
 * 
 */
export class SalesApi extends runtime.BaseAPI {

    /**
     * Check Ticket Availability
     */
    async checkTicketAvailabilitySalesTicketsEventIdAvailabilityGetRaw(requestParameters: CheckTicketAvailabilitySalesTicketsEventIdAvailabilityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketAvailabilityResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling checkTicketAvailabilitySalesTicketsEventIdAvailabilityGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sales/tickets/{event_id}/availability`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketAvailabilityResponseFromJSON(jsonValue));
    }

    /**
     * Check Ticket Availability
     */
    async checkTicketAvailabilitySalesTicketsEventIdAvailabilityGet(requestParameters: CheckTicketAvailabilitySalesTicketsEventIdAvailabilityGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketAvailabilityResponse> {
        const response = await this.checkTicketAvailabilitySalesTicketsEventIdAvailabilityGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create multiple sales in a single transaction
     * Create Bulk Sale
     */
    async createBulkSaleSalesBulkSalePostRaw(requestParameters: CreateBulkSaleSalesBulkSalePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BulkSaleResponse>> {
        if (requestParameters['saleCreate'] == null) {
            throw new runtime.RequiredError(
                'saleCreate',
                'Required parameter "saleCreate" was null or undefined when calling createBulkSaleSalesBulkSalePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sales/bulk-sale`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['saleCreate']!.map(SaleCreateToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkSaleResponseFromJSON(jsonValue));
    }

    /**
     * Create multiple sales in a single transaction
     * Create Bulk Sale
     */
    async createBulkSaleSalesBulkSalePost(requestParameters: CreateBulkSaleSalesBulkSalePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BulkSaleResponse> {
        const response = await this.createBulkSaleSalesBulkSalePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get items with low inventory for a specific event.
     * Get Inventory Alerts
     */
    async getInventoryAlertsSalesInventoryAlertsEventIdGetRaw(requestParameters: GetInventoryAlertsSalesInventoryAlertsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InventoryAlertResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getInventoryAlertsSalesInventoryAlertsEventIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['threshold'] != null) {
            queryParameters['threshold'] = requestParameters['threshold'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sales/inventory-alerts/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InventoryAlertResponseFromJSON(jsonValue));
    }

    /**
     * Get items with low inventory for a specific event.
     * Get Inventory Alerts
     */
    async getInventoryAlertsSalesInventoryAlertsEventIdGet(requestParameters: GetInventoryAlertsSalesInventoryAlertsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InventoryAlertResponse> {
        const response = await this.getInventoryAlertsSalesInventoryAlertsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all ticket sales for the event
     * Get Ticket Sales History
     */
    async getTicketSalesHistorySalesTicketsEventIdSalesHistoryGetRaw(requestParameters: GetTicketSalesHistorySalesTicketsEventIdSalesHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketSalesHistoryResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getTicketSalesHistorySalesTicketsEventIdSalesHistoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sales/tickets/{event_id}/sales-history/`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketSalesHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Get all ticket sales for the event
     * Get Ticket Sales History
     */
    async getTicketSalesHistorySalesTicketsEventIdSalesHistoryGet(requestParameters: GetTicketSalesHistorySalesTicketsEventIdSalesHistoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketSalesHistoryResponse> {
        const response = await this.getTicketSalesHistorySalesTicketsEventIdSalesHistoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get top selling items by quantity and revenue for a specific event.
     * Get Top Selling Items
     */
    async getTopSellingItemsSalesTopSellingItemsEventIdGetRaw(requestParameters: GetTopSellingItemsSalesTopSellingItemsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TopItemsResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getTopSellingItemsSalesTopSellingItemsEventIdGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sales/top-selling-items/{event_id}`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopItemsResponseFromJSON(jsonValue));
    }

    /**
     * Get top selling items by quantity and revenue for a specific event.
     * Get Top Selling Items
     */
    async getTopSellingItemsSalesTopSellingItemsEventIdGet(requestParameters: GetTopSellingItemsSalesTopSellingItemsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TopItemsResponse> {
        const response = await this.getTopSellingItemsSalesTopSellingItemsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sell Stock Item
     */
    async sellStockItemSalesStockItemsPostRaw(requestParameters: SellStockItemSalesStockItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Sale>> {
        if (requestParameters['saleCreate'] == null) {
            throw new runtime.RequiredError(
                'saleCreate',
                'Required parameter "saleCreate" was null or undefined when calling sellStockItemSalesStockItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sales/stock-items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SaleCreateToJSON(requestParameters['saleCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaleFromJSON(jsonValue));
    }

    /**
     * Sell Stock Item
     */
    async sellStockItemSalesStockItemsPost(requestParameters: SellStockItemSalesStockItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Sale> {
        const response = await this.sellStockItemSalesStockItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sell Tickets
     */
    async sellTicketsSalesTicketsPostRaw(requestParameters: SellTicketsSalesTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TicketSale>> {
        if (requestParameters['ticketSaleCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketSaleCreate',
                'Required parameter "ticketSaleCreate" was null or undefined when calling sellTicketsSalesTicketsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sales/tickets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketSaleCreateToJSON(requestParameters['ticketSaleCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketSaleFromJSON(jsonValue));
    }

    /**
     * Sell Tickets
     */
    async sellTicketsSalesTicketsPost(requestParameters: SellTicketsSalesTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TicketSale> {
        const response = await this.sellTicketsSalesTicketsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
