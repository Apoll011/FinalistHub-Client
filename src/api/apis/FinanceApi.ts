/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Balance,
  DailyRevenueResponse,
  FinancialReport,
  FinancialTransaction,
  HTTPValidationError,
  MonthlyFinancialReport,
  ProfitReportResponse,
  TopRevenueSourcesResponse,
  WeeklyFinancialReport,
} from '../models/index';
import {
    BalanceFromJSON,
    BalanceToJSON,
    DailyRevenueResponseFromJSON,
    DailyRevenueResponseToJSON,
    FinancialReportFromJSON,
    FinancialReportToJSON,
    FinancialTransactionFromJSON,
    FinancialTransactionToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MonthlyFinancialReportFromJSON,
    MonthlyFinancialReportToJSON,
    ProfitReportResponseFromJSON,
    ProfitReportResponseToJSON,
    TopRevenueSourcesResponseFromJSON,
    TopRevenueSourcesResponseToJSON,
    WeeklyFinancialReportFromJSON,
    WeeklyFinancialReportToJSON,
} from '../models/index';

export interface AddExpensesFinanceExpensesPostRequest {
    description: string;
    amount: number;
}

export interface AddRevenueFinanceRevenuePostRequest {
    description: string;
    amount: number;
}

export interface GetDailyTransactionsFinanceDailyRevenueGetRequest {
    startDate?: string;
    endDate?: string;
}

export interface GetProfitReportFinanceProfitGetRequest {
    year?: number;
    month?: number | null;
}

export interface GetTopRevenueSourcesFinanceTopRevenueSourcesGetRequest {
    limit?: number;
    startDate?: string | null;
    endDate?: string | null;
}

/**
 * 
 */
export class FinanceApi extends runtime.BaseAPI {

    /**
     * Add Expenses
     */
    async addExpensesFinanceExpensesPostRaw(requestParameters: AddExpensesFinanceExpensesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialTransaction>> {
        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling addExpensesFinanceExpensesPost().'
            );
        }

        if (requestParameters['amount'] == null) {
            throw new runtime.RequiredError(
                'amount',
                'Required parameter "amount" was null or undefined when calling addExpensesFinanceExpensesPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/expenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialTransactionFromJSON(jsonValue));
    }

    /**
     * Add Expenses
     */
    async addExpensesFinanceExpensesPost(requestParameters: AddExpensesFinanceExpensesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialTransaction> {
        const response = await this.addExpensesFinanceExpensesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Revenue
     */
    async addRevenueFinanceRevenuePostRaw(requestParameters: AddRevenueFinanceRevenuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialTransaction>> {
        if (requestParameters['description'] == null) {
            throw new runtime.RequiredError(
                'description',
                'Required parameter "description" was null or undefined when calling addRevenueFinanceRevenuePost().'
            );
        }

        if (requestParameters['amount'] == null) {
            throw new runtime.RequiredError(
                'amount',
                'Required parameter "amount" was null or undefined when calling addRevenueFinanceRevenuePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['description'] != null) {
            queryParameters['description'] = requestParameters['description'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/revenue`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialTransactionFromJSON(jsonValue));
    }

    /**
     * Add Revenue
     */
    async addRevenueFinanceRevenuePost(requestParameters: AddRevenueFinanceRevenuePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialTransaction> {
        const response = await this.addRevenueFinanceRevenuePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Balance
     */
    async getBalanceFinanceBalanceGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Balance>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BalanceFromJSON(jsonValue));
    }

    /**
     * Get Balance
     */
    async getBalanceFinanceBalanceGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Balance> {
        const response = await this.getBalanceFinanceBalanceGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get daily transaction breakdown
     * Get Daily Transactions
     */
    async getDailyTransactionsFinanceDailyRevenueGetRaw(requestParameters: GetDailyTransactionsFinanceDailyRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DailyRevenueResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/daily-revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DailyRevenueResponseFromJSON(jsonValue));
    }

    /**
     * Get daily transaction breakdown
     * Get Daily Transactions
     */
    async getDailyTransactionsFinanceDailyRevenueGet(requestParameters: GetDailyTransactionsFinanceDailyRevenueGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DailyRevenueResponse> {
        const response = await this.getDailyTransactionsFinanceDailyRevenueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Monthly Transactions
     */
    async getMonthlyTransactionsFinanceTransactionsMonthlyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyFinancialReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/transactions/monthly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyFinancialReportFromJSON(jsonValue));
    }

    /**
     * Get Monthly Transactions
     */
    async getMonthlyTransactionsFinanceTransactionsMonthlyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyFinancialReport> {
        const response = await this.getMonthlyTransactionsFinanceTransactionsMonthlyGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Generate profit and loss report
     * Get Profit Report
     */
    async getProfitReportFinanceProfitGetRaw(requestParameters: GetProfitReportFinanceProfitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfitReportResponse>> {
        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['month'] != null) {
            queryParameters['month'] = requestParameters['month'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/profit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfitReportResponseFromJSON(jsonValue));
    }

    /**
     * Generate profit and loss report
     * Get Profit Report
     */
    async getProfitReportFinanceProfitGet(requestParameters: GetProfitReportFinanceProfitGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfitReportResponse> {
        const response = await this.getProfitReportFinanceProfitGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get top revenue sources grouped by description
     * Get Top Revenue Sources
     */
    async getTopRevenueSourcesFinanceTopRevenueSourcesGetRaw(requestParameters: GetTopRevenueSourcesFinanceTopRevenueSourcesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TopRevenueSourcesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/top-revenue-sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TopRevenueSourcesResponseFromJSON(jsonValue));
    }

    /**
     * Get top revenue sources grouped by description
     * Get Top Revenue Sources
     */
    async getTopRevenueSourcesFinanceTopRevenueSourcesGet(requestParameters: GetTopRevenueSourcesFinanceTopRevenueSourcesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TopRevenueSourcesResponse> {
        const response = await this.getTopRevenueSourcesFinanceTopRevenueSourcesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Transactions
     */
    async getTransactionsFinanceTransactionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FinancialReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FinancialReportFromJSON(jsonValue));
    }

    /**
     * Get Transactions
     */
    async getTransactionsFinanceTransactionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FinancialReport> {
        const response = await this.getTransactionsFinanceTransactionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Weekly Transactions
     */
    async getWeeklyTransactionsFinanceTransactionsWeeklyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<WeeklyFinancialReport>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/transactions/weekly`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WeeklyFinancialReportFromJSON(jsonValue));
    }

    /**
     * Get Weekly Transactions
     */
    async getWeeklyTransactionsFinanceTransactionsWeeklyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<WeeklyFinancialReport> {
        const response = await this.getWeeklyTransactionsFinanceTransactionsWeeklyGetRaw(initOverrides);
        return await response.value();
    }

}
