/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AvailableResponse,
  CancelEventResponse,
  CapacityAnalysisResponse,
  DateInput,
  DuplicateEventResponse,
  Event,
  EventCreate,
  EventDetailsResponse,
  EventReportResponse,
  EventStatisticsResponse,
  EventStatus,
  HTTPValidationError,
  Item,
  ItemBase,
  ItemCreate,
  ObservationInput,
  ObservationResponse,
  ReopenEventResponse,
  RescheduleEventResponse,
  SearchEventsResponse,
  Ticket,
  TicketCreate,
} from '../models/index';
import {
    AvailableResponseFromJSON,
    AvailableResponseToJSON,
    CancelEventResponseFromJSON,
    CancelEventResponseToJSON,
    CapacityAnalysisResponseFromJSON,
    CapacityAnalysisResponseToJSON,
    DateInputFromJSON,
    DateInputToJSON,
    DuplicateEventResponseFromJSON,
    DuplicateEventResponseToJSON,
    EventFromJSON,
    EventToJSON,
    EventCreateFromJSON,
    EventCreateToJSON,
    EventDetailsResponseFromJSON,
    EventDetailsResponseToJSON,
    EventReportResponseFromJSON,
    EventReportResponseToJSON,
    EventStatisticsResponseFromJSON,
    EventStatisticsResponseToJSON,
    EventStatusFromJSON,
    EventStatusToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ItemFromJSON,
    ItemToJSON,
    ItemBaseFromJSON,
    ItemBaseToJSON,
    ItemCreateFromJSON,
    ItemCreateToJSON,
    ObservationInputFromJSON,
    ObservationInputToJSON,
    ObservationResponseFromJSON,
    ObservationResponseToJSON,
    ReopenEventResponseFromJSON,
    ReopenEventResponseToJSON,
    RescheduleEventResponseFromJSON,
    RescheduleEventResponseToJSON,
    SearchEventsResponseFromJSON,
    SearchEventsResponseToJSON,
    TicketFromJSON,
    TicketToJSON,
    TicketCreateFromJSON,
    TicketCreateToJSON,
} from '../models/index';

export interface AddEventItemsEventsEventIdItemsPostRequest {
    eventId: string;
    itemCreate: ItemCreate;
}

export interface AddObservationEventsEventIdObservationsPostRequest {
    eventId: string;
    observationInput: ObservationInput;
}

export interface CancelEventEventsEventIdCancelPatchRequest {
    eventId: string;
}

export interface ChangeAvailabilityEventsTicketIdAvailablePatchRequest {
    ticketId: string;
    available: boolean;
}

export interface CloseEventEventsEventIdClosePostRequest {
    eventId: string;
}

export interface CreateEventEventsPostRequest {
    eventCreate: EventCreate;
}

export interface CreateTicketEventsEventIdTicketsPostRequest {
    eventId: string;
    ticketCreate: TicketCreate;
}

export interface DeleteItemEventsEventIdItemsDeleteRequest {
    eventId: string;
    itemId: string;
}

export interface DeleteTicketEventsEventIdTicketsDeleteRequest {
    eventId: string;
    ticketId: string;
}

export interface DuplicateEventEventsEventIdDuplicatePostRequest {
    eventId: string;
    newDate: string;
    newTime: string;
}

export interface GetCalendarEventsCalendarGetRequest {
    all?: boolean;
}

export interface GetEventDataEventsEventIdGetRequest {
    eventId: string;
}

export interface GetEventDetailsEventsEventIdDetailsGetRequest {
    eventId: string;
}

export interface GetEventItemsEventsEventIdItemsGetRequest {
    eventId: string;
}

export interface GetEventTicketsEventsEventIdTicketsGetRequest {
    eventId: string;
}

export interface GetEventsStatisticsEventsStatisticsGetRequest {
    startDate?: string | null;
    endDate?: string | null;
}

export interface ReopenEventEventsEventIdReopenPatchRequest {
    eventId: string;
}

export interface ReportEventsEventIdReportGetRequest {
    eventId: string;
}

export interface RescheduleEventEventsEventIdReschedulePatchRequest {
    eventId: string;
    dateInput: DateInput;
}

export interface SearchEventsEventsSearchGetRequest {
    query: string;
    status?: EventStatus | null;
    startDate?: string | null;
    endDate?: string | null;
}

export interface UpdateItemQuantityEventsItemsItemIdQuantityPutRequest {
    itemId: string;
    quantity: number;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Add Event Items
     */
    async addEventItemsEventsEventIdItemsPostRaw(requestParameters: AddEventItemsEventsEventIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Item>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling addEventItemsEventsEventIdItemsPost().'
            );
        }

        if (requestParameters['itemCreate'] == null) {
            throw new runtime.RequiredError(
                'itemCreate',
                'Required parameter "itemCreate" was null or undefined when calling addEventItemsEventsEventIdItemsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{event_id}/items`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateToJSON(requestParameters['itemCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemFromJSON(jsonValue));
    }

    /**
     * Add Event Items
     */
    async addEventItemsEventsEventIdItemsPost(requestParameters: AddEventItemsEventsEventIdItemsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Item> {
        const response = await this.addEventItemsEventsEventIdItemsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Observation
     */
    async addObservationEventsEventIdObservationsPostRaw(requestParameters: AddObservationEventsEventIdObservationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ObservationResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling addObservationEventsEventIdObservationsPost().'
            );
        }

        if (requestParameters['observationInput'] == null) {
            throw new runtime.RequiredError(
                'observationInput',
                'Required parameter "observationInput" was null or undefined when calling addObservationEventsEventIdObservationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{event_id}/observations`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ObservationInputToJSON(requestParameters['observationInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ObservationResponseFromJSON(jsonValue));
    }

    /**
     * Add Observation
     */
    async addObservationEventsEventIdObservationsPost(requestParameters: AddObservationEventsEventIdObservationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ObservationResponse> {
        const response = await this.addObservationEventsEventIdObservationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Cancel Event
     */
    async cancelEventEventsEventIdCancelPatchRaw(requestParameters: CancelEventEventsEventIdCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelEventResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling cancelEventEventsEventIdCancelPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/cancel`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelEventResponseFromJSON(jsonValue));
    }

    /**
     * Cancel Event
     */
    async cancelEventEventsEventIdCancelPatch(requestParameters: CancelEventEventsEventIdCancelPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelEventResponse> {
        const response = await this.cancelEventEventsEventIdCancelPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change Availability
     */
    async changeAvailabilityEventsTicketIdAvailablePatchRaw(requestParameters: ChangeAvailabilityEventsTicketIdAvailablePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AvailableResponse>> {
        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling changeAvailabilityEventsTicketIdAvailablePatch().'
            );
        }

        if (requestParameters['available'] == null) {
            throw new runtime.RequiredError(
                'available',
                'Required parameter "available" was null or undefined when calling changeAvailabilityEventsTicketIdAvailablePatch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['available'] != null) {
            queryParameters['available'] = requestParameters['available'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{ticket_id}/available`.replace(`{${"ticket_id"}}`, encodeURIComponent(String(requestParameters['ticketId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AvailableResponseFromJSON(jsonValue));
    }

    /**
     * Change Availability
     */
    async changeAvailabilityEventsTicketIdAvailablePatch(requestParameters: ChangeAvailabilityEventsTicketIdAvailablePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AvailableResponse> {
        const response = await this.changeAvailabilityEventsTicketIdAvailablePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Close Event
     */
    async closeEventEventsEventIdClosePostRaw(requestParameters: CloseEventEventsEventIdClosePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling closeEventEventsEventIdClosePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/close`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Close Event
     */
    async closeEventEventsEventIdClosePost(requestParameters: CloseEventEventsEventIdClosePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.closeEventEventsEventIdClosePostRaw(requestParameters, initOverrides);
    }

    /**
     * Create Event
     */
    async createEventEventsPostRaw(requestParameters: CreateEventEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['eventCreate'] == null) {
            throw new runtime.RequiredError(
                'eventCreate',
                'Required parameter "eventCreate" was null or undefined when calling createEventEventsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventCreateToJSON(requestParameters['eventCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Create Event
     */
    async createEventEventsPost(requestParameters: CreateEventEventsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.createEventEventsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Ticket
     */
    async createTicketEventsEventIdTicketsPostRaw(requestParameters: CreateTicketEventsEventIdTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ticket>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling createTicketEventsEventIdTicketsPost().'
            );
        }

        if (requestParameters['ticketCreate'] == null) {
            throw new runtime.RequiredError(
                'ticketCreate',
                'Required parameter "ticketCreate" was null or undefined when calling createTicketEventsEventIdTicketsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{event_id}/tickets`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TicketCreateToJSON(requestParameters['ticketCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TicketFromJSON(jsonValue));
    }

    /**
     * Create Ticket
     */
    async createTicketEventsEventIdTicketsPost(requestParameters: CreateTicketEventsEventIdTicketsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ticket> {
        const response = await this.createTicketEventsEventIdTicketsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Item
     */
    async deleteItemEventsEventIdItemsDeleteRaw(requestParameters: DeleteItemEventsEventIdItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling deleteItemEventsEventIdItemsDelete().'
            );
        }

        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling deleteItemEventsEventIdItemsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['itemId'] != null) {
            queryParameters['item_id'] = requestParameters['itemId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/items`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Item
     */
    async deleteItemEventsEventIdItemsDelete(requestParameters: DeleteItemEventsEventIdItemsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteItemEventsEventIdItemsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Ticket
     */
    async deleteTicketEventsEventIdTicketsDeleteRaw(requestParameters: DeleteTicketEventsEventIdTicketsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling deleteTicketEventsEventIdTicketsDelete().'
            );
        }

        if (requestParameters['ticketId'] == null) {
            throw new runtime.RequiredError(
                'ticketId',
                'Required parameter "ticketId" was null or undefined when calling deleteTicketEventsEventIdTicketsDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ticketId'] != null) {
            queryParameters['ticket_id'] = requestParameters['ticketId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/tickets`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Ticket
     */
    async deleteTicketEventsEventIdTicketsDelete(requestParameters: DeleteTicketEventsEventIdTicketsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTicketEventsEventIdTicketsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Duplicate an existing event with its tickets and items
     * Duplicate Event
     */
    async duplicateEventEventsEventIdDuplicatePostRaw(requestParameters: DuplicateEventEventsEventIdDuplicatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuplicateEventResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling duplicateEventEventsEventIdDuplicatePost().'
            );
        }

        if (requestParameters['newDate'] == null) {
            throw new runtime.RequiredError(
                'newDate',
                'Required parameter "newDate" was null or undefined when calling duplicateEventEventsEventIdDuplicatePost().'
            );
        }

        if (requestParameters['newTime'] == null) {
            throw new runtime.RequiredError(
                'newTime',
                'Required parameter "newTime" was null or undefined when calling duplicateEventEventsEventIdDuplicatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['newDate'] != null) {
            queryParameters['new_date'] = requestParameters['newDate'];
        }

        if (requestParameters['newTime'] != null) {
            queryParameters['new_time'] = requestParameters['newTime'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/duplicate`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuplicateEventResponseFromJSON(jsonValue));
    }

    /**
     * Duplicate an existing event with its tickets and items
     * Duplicate Event
     */
    async duplicateEventEventsEventIdDuplicatePost(requestParameters: DuplicateEventEventsEventIdDuplicatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuplicateEventResponse> {
        const response = await this.duplicateEventEventsEventIdDuplicatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Calendar
     */
    async getCalendarEventsCalendarGetRaw(requestParameters: GetCalendarEventsCalendarGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Event>>> {
        const queryParameters: any = {};

        if (requestParameters['all'] != null) {
            queryParameters['all'] = requestParameters['all'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/calendar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventFromJSON));
    }

    /**
     * Get Calendar
     */
    async getCalendarEventsCalendarGet(requestParameters: GetCalendarEventsCalendarGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Event>> {
        const response = await this.getCalendarEventsCalendarGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Analyze venue capacity utilization
     * Get Capacity Analysis
     */
    async getCapacityAnalysisEventsCapacityAnalysisGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CapacityAnalysisResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/capacity-analysis`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CapacityAnalysisResponseFromJSON(jsonValue));
    }

    /**
     * Analyze venue capacity utilization
     * Get Capacity Analysis
     */
    async getCapacityAnalysisEventsCapacityAnalysisGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CapacityAnalysisResponse> {
        const response = await this.getCapacityAnalysisEventsCapacityAnalysisGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Event Data
     */
    async getEventDataEventsEventIdGetRaw(requestParameters: GetEventDataEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Event>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getEventDataEventsEventIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
    }

    /**
     * Get Event Data
     */
    async getEventDataEventsEventIdGet(requestParameters: GetEventDataEventsEventIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Event> {
        const response = await this.getEventDataEventsEventIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Event Details
     */
    async getEventDetailsEventsEventIdDetailsGetRaw(requestParameters: GetEventDetailsEventsEventIdDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventDetailsResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getEventDetailsEventsEventIdDetailsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/details`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventDetailsResponseFromJSON(jsonValue));
    }

    /**
     * Get Event Details
     */
    async getEventDetailsEventsEventIdDetailsGet(requestParameters: GetEventDetailsEventsEventIdDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventDetailsResponse> {
        const response = await this.getEventDetailsEventsEventIdDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Event Items
     */
    async getEventItemsEventsEventIdItemsGetRaw(requestParameters: GetEventItemsEventsEventIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Item>>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getEventItemsEventsEventIdItemsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/items`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItemFromJSON));
    }

    /**
     * Get Event Items
     */
    async getEventItemsEventsEventIdItemsGet(requestParameters: GetEventItemsEventsEventIdItemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Item>> {
        const response = await this.getEventItemsEventsEventIdItemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Event Tickets
     */
    async getEventTicketsEventsEventIdTicketsGetRaw(requestParameters: GetEventTicketsEventsEventIdTicketsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Ticket>>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling getEventTicketsEventsEventIdTicketsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/tickets`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TicketFromJSON));
    }

    /**
     * Get Event Tickets
     */
    async getEventTicketsEventsEventIdTicketsGet(requestParameters: GetEventTicketsEventsEventIdTicketsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Ticket>> {
        const response = await this.getEventTicketsEventsEventIdTicketsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get statistical overview of all events within a date range
     * Get Events Statistics
     */
    async getEventsStatisticsEventsStatisticsGetRaw(requestParameters: GetEventsStatisticsEventsStatisticsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventStatisticsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventStatisticsResponseFromJSON(jsonValue));
    }

    /**
     * Get statistical overview of all events within a date range
     * Get Events Statistics
     */
    async getEventsStatisticsEventsStatisticsGet(requestParameters: GetEventsStatisticsEventsStatisticsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventStatisticsResponse> {
        const response = await this.getEventsStatisticsEventsStatisticsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reopen Event
     */
    async reopenEventEventsEventIdReopenPatchRaw(requestParameters: ReopenEventEventsEventIdReopenPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReopenEventResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling reopenEventEventsEventIdReopenPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/reopen`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReopenEventResponseFromJSON(jsonValue));
    }

    /**
     * Reopen Event
     */
    async reopenEventEventsEventIdReopenPatch(requestParameters: ReopenEventEventsEventIdReopenPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReopenEventResponse> {
        const response = await this.reopenEventEventsEventIdReopenPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Report
     */
    async reportEventsEventIdReportGetRaw(requestParameters: ReportEventsEventIdReportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventReportResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling reportEventsEventIdReportGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/{event_id}/report`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventReportResponseFromJSON(jsonValue));
    }

    /**
     * Report
     */
    async reportEventsEventIdReportGet(requestParameters: ReportEventsEventIdReportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventReportResponse> {
        const response = await this.reportEventsEventIdReportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reschedule Event
     */
    async rescheduleEventEventsEventIdReschedulePatchRaw(requestParameters: RescheduleEventEventsEventIdReschedulePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RescheduleEventResponse>> {
        if (requestParameters['eventId'] == null) {
            throw new runtime.RequiredError(
                'eventId',
                'Required parameter "eventId" was null or undefined when calling rescheduleEventEventsEventIdReschedulePatch().'
            );
        }

        if (requestParameters['dateInput'] == null) {
            throw new runtime.RequiredError(
                'dateInput',
                'Required parameter "dateInput" was null or undefined when calling rescheduleEventEventsEventIdReschedulePatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/events/{event_id}/reschedule`.replace(`{${"event_id"}}`, encodeURIComponent(String(requestParameters['eventId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DateInputToJSON(requestParameters['dateInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RescheduleEventResponseFromJSON(jsonValue));
    }

    /**
     * Reschedule Event
     */
    async rescheduleEventEventsEventIdReschedulePatch(requestParameters: RescheduleEventEventsEventIdReschedulePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RescheduleEventResponse> {
        const response = await this.rescheduleEventEventsEventIdReschedulePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search events by name, description, or location with optional filters
     * Search Events
     */
    async searchEventsEventsSearchGetRaw(requestParameters: SearchEventsEventsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SearchEventsResponse>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling searchEventsEventsSearchGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchEventsResponseFromJSON(jsonValue));
    }

    /**
     * Search events by name, description, or location with optional filters
     * Search Events
     */
    async searchEventsEventsSearchGet(requestParameters: SearchEventsEventsSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SearchEventsResponse> {
        const response = await this.searchEventsEventsSearchGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the current quantity in stock for an item.
     * Update Item Quantity
     */
    async updateItemQuantityEventsItemsItemIdQuantityPutRaw(requestParameters: UpdateItemQuantityEventsItemsItemIdQuantityPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemBase>> {
        if (requestParameters['itemId'] == null) {
            throw new runtime.RequiredError(
                'itemId',
                'Required parameter "itemId" was null or undefined when calling updateItemQuantityEventsItemsItemIdQuantityPut().'
            );
        }

        if (requestParameters['quantity'] == null) {
            throw new runtime.RequiredError(
                'quantity',
                'Required parameter "quantity" was null or undefined when calling updateItemQuantityEventsItemsItemIdQuantityPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['quantity'] != null) {
            queryParameters['quantity'] = requestParameters['quantity'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/events/items/{item_id}/quantity`.replace(`{${"item_id"}}`, encodeURIComponent(String(requestParameters['itemId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemBaseFromJSON(jsonValue));
    }

    /**
     * Set the current quantity in stock for an item.
     * Update Item Quantity
     */
    async updateItemQuantityEventsItemsItemIdQuantityPut(requestParameters: UpdateItemQuantityEventsItemsItemIdQuantityPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemBase> {
        const response = await this.updateItemQuantityEventsItemsItemIdQuantityPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
