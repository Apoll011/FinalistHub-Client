/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Meeting,
  MeetingBase,
  MeetingList,
  MeetingMinutes,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MeetingFromJSON,
    MeetingToJSON,
    MeetingBaseFromJSON,
    MeetingBaseToJSON,
    MeetingListFromJSON,
    MeetingListToJSON,
    MeetingMinutesFromJSON,
    MeetingMinutesToJSON,
} from '../models/index';

export interface CreateMeetingMeetingsPostRequest {
    date: string;
    time: string;
    location: string;
    agenda: string;
}

export interface DeleteMeetingMeetingsMeetingIdDeleteRequest {
    meetingId: string;
}

export interface GetMeetingMinutesMeetingsMeetingIdMinutesGetRequest {
    meetingId: string;
}

export interface UpdateMeetingMeetingsMeetingIdPatchRequest {
    meetingId: string;
    meetingBase: MeetingBase;
}

export interface UploadMinutesMeetingsMeetingIdMinutesPostRequest {
    meetingId: string;
    file: Blob;
}

/**
 * 
 */
export class MeetingsApi extends runtime.BaseAPI {

    /**
     * Create Meeting
     */
    async createMeetingMeetingsPostRaw(requestParameters: CreateMeetingMeetingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters['date'] == null) {
            throw new runtime.RequiredError(
                'date',
                'Required parameter "date" was null or undefined when calling createMeetingMeetingsPost().'
            );
        }

        if (requestParameters['time'] == null) {
            throw new runtime.RequiredError(
                'time',
                'Required parameter "time" was null or undefined when calling createMeetingMeetingsPost().'
            );
        }

        if (requestParameters['location'] == null) {
            throw new runtime.RequiredError(
                'location',
                'Required parameter "location" was null or undefined when calling createMeetingMeetingsPost().'
            );
        }

        if (requestParameters['agenda'] == null) {
            throw new runtime.RequiredError(
                'agenda',
                'Required parameter "agenda" was null or undefined when calling createMeetingMeetingsPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['date'] != null) {
            queryParameters['date'] = requestParameters['date'];
        }

        if (requestParameters['time'] != null) {
            queryParameters['time'] = requestParameters['time'];
        }

        if (requestParameters['location'] != null) {
            queryParameters['location'] = requestParameters['location'];
        }

        if (requestParameters['agenda'] != null) {
            queryParameters['agenda'] = requestParameters['agenda'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meetings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     * Create Meeting
     */
    async createMeetingMeetingsPost(requestParameters: CreateMeetingMeetingsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meeting> {
        const response = await this.createMeetingMeetingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Meeting
     */
    async deleteMeetingMeetingsMeetingIdDeleteRaw(requestParameters: DeleteMeetingMeetingsMeetingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['meetingId'] == null) {
            throw new runtime.RequiredError(
                'meetingId',
                'Required parameter "meetingId" was null or undefined when calling deleteMeetingMeetingsMeetingIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meetings/{meeting_id}`.replace(`{${"meeting_id"}}`, encodeURIComponent(String(requestParameters['meetingId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Delete Meeting
     */
    async deleteMeetingMeetingsMeetingIdDelete(requestParameters: DeleteMeetingMeetingsMeetingIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.deleteMeetingMeetingsMeetingIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Meeting Minutes
     */
    async getMeetingMinutesMeetingsMeetingIdMinutesGetRaw(requestParameters: GetMeetingMinutesMeetingsMeetingIdMinutesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['meetingId'] == null) {
            throw new runtime.RequiredError(
                'meetingId',
                'Required parameter "meetingId" was null or undefined when calling getMeetingMinutesMeetingsMeetingIdMinutesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meetings/{meeting_id}/minutes`.replace(`{${"meeting_id"}}`, encodeURIComponent(String(requestParameters['meetingId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Meeting Minutes
     */
    async getMeetingMinutesMeetingsMeetingIdMinutesGet(requestParameters: GetMeetingMinutesMeetingsMeetingIdMinutesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getMeetingMinutesMeetingsMeetingIdMinutesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Upcoming Meetings
     */
    async getUpcomingMeetingsMeetingsUpcomingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeetingList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/meetings/upcoming`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingListFromJSON(jsonValue));
    }

    /**
     * Get Upcoming Meetings
     */
    async getUpcomingMeetingsMeetingsUpcomingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeetingList> {
        const response = await this.getUpcomingMeetingsMeetingsUpcomingGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Meeting
     */
    async updateMeetingMeetingsMeetingIdPatchRaw(requestParameters: UpdateMeetingMeetingsMeetingIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Meeting>> {
        if (requestParameters['meetingId'] == null) {
            throw new runtime.RequiredError(
                'meetingId',
                'Required parameter "meetingId" was null or undefined when calling updateMeetingMeetingsMeetingIdPatch().'
            );
        }

        if (requestParameters['meetingBase'] == null) {
            throw new runtime.RequiredError(
                'meetingBase',
                'Required parameter "meetingBase" was null or undefined when calling updateMeetingMeetingsMeetingIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/meetings/{meeting_id}`.replace(`{${"meeting_id"}}`, encodeURIComponent(String(requestParameters['meetingId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeetingBaseToJSON(requestParameters['meetingBase']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingFromJSON(jsonValue));
    }

    /**
     * Update Meeting
     */
    async updateMeetingMeetingsMeetingIdPatch(requestParameters: UpdateMeetingMeetingsMeetingIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Meeting> {
        const response = await this.updateMeetingMeetingsMeetingIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload Minutes
     */
    async uploadMinutesMeetingsMeetingIdMinutesPostRaw(requestParameters: UploadMinutesMeetingsMeetingIdMinutesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeetingMinutes>> {
        if (requestParameters['meetingId'] == null) {
            throw new runtime.RequiredError(
                'meetingId',
                'Required parameter "meetingId" was null or undefined when calling uploadMinutesMeetingsMeetingIdMinutesPost().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadMinutesMeetingsMeetingIdMinutesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/meetings/{meeting_id}/minutes`.replace(`{${"meeting_id"}}`, encodeURIComponent(String(requestParameters['meetingId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeetingMinutesFromJSON(jsonValue));
    }

    /**
     * Upload Minutes
     */
    async uploadMinutesMeetingsMeetingIdMinutesPost(requestParameters: UploadMinutesMeetingsMeetingIdMinutesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeetingMinutes> {
        const response = await this.uploadMinutesMeetingsMeetingIdMinutesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
