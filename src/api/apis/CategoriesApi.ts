/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryUsageResponse,
  HTTPValidationError,
  TransactionCategoryCreate,
  TransactionCategoryResponse,
} from '../models/index';
import {
    CategoryUsageResponseFromJSON,
    CategoryUsageResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TransactionCategoryCreateFromJSON,
    TransactionCategoryCreateToJSON,
    TransactionCategoryResponseFromJSON,
    TransactionCategoryResponseToJSON,
} from '../models/index';

export interface CreateCategoryCategoriesPostRequest {
    transactionCategoryCreate: TransactionCategoryCreate;
}

export interface DeleteCategoryCategoriesCategoryIdDeleteRequest {
    categoryId: string;
}

export interface GetCategoryCategoriesCategoryIdGetRequest {
    categoryId: string;
}

export interface GetCategoryUsageCategoriesCategoryIdUsageGetRequest {
    categoryId: string;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface ListCategoriesCategoriesGetRequest {
    skip?: number;
    limit?: number;
    search?: string | null;
}

export interface UpdateCategoryCategoriesCategoryIdPutRequest {
    categoryId: string;
    transactionCategoryCreate: TransactionCategoryCreate;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Create a new transaction category
     * Create Category
     */
    async createCategoryCategoriesPostRaw(requestParameters: CreateCategoryCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCategoryResponse>> {
        if (requestParameters['transactionCategoryCreate'] == null) {
            throw new runtime.RequiredError(
                'transactionCategoryCreate',
                'Required parameter "transactionCategoryCreate" was null or undefined when calling createCategoryCategoriesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCategoryCreateToJSON(requestParameters['transactionCategoryCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Create a new transaction category
     * Create Category
     */
    async createCategoryCategoriesPost(requestParameters: CreateCategoryCategoriesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCategoryResponse> {
        const response = await this.createCategoryCategoriesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a category if it\'s not being used
     * Delete Category
     */
    async deleteCategoryCategoriesCategoryIdDeleteRaw(requestParameters: DeleteCategoryCategoriesCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCategoryResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling deleteCategoryCategoriesCategoryIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{category_id}`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Delete a category if it\'s not being used
     * Delete Category
     */
    async deleteCategoryCategoriesCategoryIdDelete(requestParameters: DeleteCategoryCategoriesCategoryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCategoryResponse> {
        const response = await this.deleteCategoryCategoriesCategoryIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific category by ID
     * Get Category
     */
    async getCategoryCategoriesCategoryIdGetRaw(requestParameters: GetCategoryCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCategoryResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getCategoryCategoriesCategoryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{category_id}`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Get a specific category by ID
     * Get Category
     */
    async getCategoryCategoriesCategoryIdGet(requestParameters: GetCategoryCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCategoryResponse> {
        const response = await this.getCategoryCategoriesCategoryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get usage statistics for a category
     * Get Category Usage
     */
    async getCategoryUsageCategoriesCategoryIdUsageGetRaw(requestParameters: GetCategoryUsageCategoriesCategoryIdUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryUsageResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getCategoryUsageCategoriesCategoryIdUsageGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/{category_id}/usage`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryUsageResponseFromJSON(jsonValue));
    }

    /**
     * Get usage statistics for a category
     * Get Category Usage
     */
    async getCategoryUsageCategoriesCategoryIdUsageGet(requestParameters: GetCategoryUsageCategoriesCategoryIdUsageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryUsageResponse> {
        const response = await this.getCategoryUsageCategoriesCategoryIdUsageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all transaction categories with optional search
     * List Categories
     */
    async listCategoriesCategoriesGetRaw(requestParameters: ListCategoriesCategoriesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionCategoryResponse>>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/categories/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionCategoryResponseFromJSON));
    }

    /**
     * List all transaction categories with optional search
     * List Categories
     */
    async listCategoriesCategoriesGet(requestParameters: ListCategoriesCategoriesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionCategoryResponse>> {
        const response = await this.listCategoriesCategoriesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing category
     * Update Category
     */
    async updateCategoryCategoriesCategoryIdPutRaw(requestParameters: UpdateCategoryCategoriesCategoryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionCategoryResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling updateCategoryCategoriesCategoryIdPut().'
            );
        }

        if (requestParameters['transactionCategoryCreate'] == null) {
            throw new runtime.RequiredError(
                'transactionCategoryCreate',
                'Required parameter "transactionCategoryCreate" was null or undefined when calling updateCategoryCategoriesCategoryIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/categories/{category_id}`.replace(`{${"category_id"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionCategoryCreateToJSON(requestParameters['transactionCategoryCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionCategoryResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing category
     * Update Category
     */
    async updateCategoryCategoriesCategoryIdPut(requestParameters: UpdateCategoryCategoriesCategoryIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionCategoryResponse> {
        const response = await this.updateCategoryCategoriesCategoryIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
