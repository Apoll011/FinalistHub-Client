/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionType } from './TransactionType';
import {
    TransactionTypeFromJSON,
    TransactionTypeFromJSONTyped,
    TransactionTypeToJSON,
    TransactionTypeToJSONTyped,
} from './TransactionType';
import type { PaymentMethod } from './PaymentMethod';
import {
    PaymentMethodFromJSON,
    PaymentMethodFromJSONTyped,
    PaymentMethodToJSON,
    PaymentMethodToJSONTyped,
} from './PaymentMethod';

/**
 * 
 * @export
 * @interface TransactionCreate
 */
export interface TransactionCreate {
    /**
     * 
     * @type {TransactionType}
     * @memberof TransactionCreate
     */
    type: TransactionType;
    /**
     * 
     * @type {number}
     * @memberof TransactionCreate
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    description?: string | null;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof TransactionCreate
     */
    paymentMethod?: PaymentMethod | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    fromAccountId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    toAccountId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    categoryId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    eventId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    receiptNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    notes?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TransactionCreate
     */
    createdBy: string;
    /**
     * 
     * @type {Date}
     * @memberof TransactionCreate
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionCreate
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the TransactionCreate interface.
 */
export function instanceOfTransactionCreate(value: object): value is TransactionCreate {
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function TransactionCreateFromJSON(json: any): TransactionCreate {
    return TransactionCreateFromJSONTyped(json, false);
}

export function TransactionCreateFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionCreate {
    if (json == null) {
        return json;
    }
    return {
        
        'type': TransactionTypeFromJSON(json['type']),
        'amount': json['amount'],
        'description': json['description'] == null ? undefined : json['description'],
        'paymentMethod': json['payment_method'] == null ? undefined : PaymentMethodFromJSON(json['payment_method']),
        'fromAccountId': json['from_account_id'] == null ? undefined : json['from_account_id'],
        'toAccountId': json['to_account_id'] == null ? undefined : json['to_account_id'],
        'categoryId': json['category_id'] == null ? undefined : json['category_id'],
        'eventId': json['event_id'] == null ? undefined : json['event_id'],
        'receiptNumber': json['receipt_number'] == null ? undefined : json['receipt_number'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'createdBy': json['created_by'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function TransactionCreateToJSON(json: any): TransactionCreate {
    return TransactionCreateToJSONTyped(json, false);
}

export function TransactionCreateToJSONTyped(value?: TransactionCreate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': TransactionTypeToJSON(value['type']),
        'amount': value['amount'],
        'description': value['description'],
        'payment_method': PaymentMethodToJSON(value['paymentMethod']),
        'from_account_id': value['fromAccountId'],
        'to_account_id': value['toAccountId'],
        'category_id': value['categoryId'],
        'event_id': value['eventId'],
        'receipt_number': value['receiptNumber'],
        'notes': value['notes'],
        'created_by': value['createdBy'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

