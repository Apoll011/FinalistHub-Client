/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionResponse } from './TransactionResponse';
import {
    TransactionResponseFromJSON,
    TransactionResponseFromJSONTyped,
    TransactionResponseToJSON,
    TransactionResponseToJSONTyped,
} from './TransactionResponse';

/**
 * 
 * @export
 * @interface AccountStatement
 */
export interface AccountStatement {
    /**
     * 
     * @type {string}
     * @memberof AccountStatement
     */
    accountId: string;
    /**
     * 
     * @type {string}
     * @memberof AccountStatement
     */
    accountName: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountStatement
     */
    startDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof AccountStatement
     */
    endDate: Date;
    /**
     * 
     * @type {number}
     * @memberof AccountStatement
     */
    openingBalance: number;
    /**
     * 
     * @type {number}
     * @memberof AccountStatement
     */
    closingBalance: number;
    /**
     * 
     * @type {Array<TransactionResponse>}
     * @memberof AccountStatement
     */
    transactions: Array<TransactionResponse>;
}

/**
 * Check if a given object implements the AccountStatement interface.
 */
export function instanceOfAccountStatement(value: object): value is AccountStatement {
    if (!('accountId' in value) || value['accountId'] === undefined) return false;
    if (!('accountName' in value) || value['accountName'] === undefined) return false;
    if (!('startDate' in value) || value['startDate'] === undefined) return false;
    if (!('endDate' in value) || value['endDate'] === undefined) return false;
    if (!('openingBalance' in value) || value['openingBalance'] === undefined) return false;
    if (!('closingBalance' in value) || value['closingBalance'] === undefined) return false;
    if (!('transactions' in value) || value['transactions'] === undefined) return false;
    return true;
}

export function AccountStatementFromJSON(json: any): AccountStatement {
    return AccountStatementFromJSONTyped(json, false);
}

export function AccountStatementFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountStatement {
    if (json == null) {
        return json;
    }
    return {
        
        'accountId': json['account_id'],
        'accountName': json['account_name'],
        'startDate': (new Date(json['start_date'])),
        'endDate': (new Date(json['end_date'])),
        'openingBalance': json['opening_balance'],
        'closingBalance': json['closing_balance'],
        'transactions': ((json['transactions'] as Array<any>).map(TransactionResponseFromJSON)),
    };
}

export function AccountStatementToJSON(json: any): AccountStatement {
    return AccountStatementToJSONTyped(json, false);
}

export function AccountStatementToJSONTyped(value?: AccountStatement | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'account_id': value['accountId'],
        'account_name': value['accountName'],
        'start_date': ((value['startDate']).toISOString()),
        'end_date': ((value['endDate']).toISOString()),
        'opening_balance': value['openingBalance'],
        'closing_balance': value['closingBalance'],
        'transactions': ((value['transactions'] as Array<any>).map(TransactionResponseToJSON)),
    };
}

