/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventStatus } from './EventStatus';
import {
    EventStatusFromJSON,
    EventStatusFromJSONTyped,
    EventStatusToJSON,
    EventStatusToJSONTyped,
} from './EventStatus';

/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    date: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    time: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    id: string;
    /**
     * 
     * @type {EventStatus}
     * @memberof Event
     */
    status: EventStatus;
    /**
     * 
     * @type {Date}
     * @memberof Event
     */
    createdAt: Date;
}



/**
 * Check if a given object implements the Event interface.
 */
export function instanceOfEvent(value: object): value is Event {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('location' in value) || value['location'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    return true;
}

export function EventFromJSON(json: any): Event {
    return EventFromJSONTyped(json, false);
}

export function EventFromJSONTyped(json: any, ignoreDiscriminator: boolean): Event {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'date': json['date'],
        'time': json['time'],
        'location': json['location'],
        'description': json['description'],
        'id': json['id'],
        'status': EventStatusFromJSON(json['status']),
        'createdAt': (new Date(json['created_at'])),
    };
}

export function EventToJSON(json: any): Event {
    return EventToJSONTyped(json, false);
}

export function EventToJSONTyped(value?: Event | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'date': value['date'],
        'time': value['time'],
        'location': value['location'],
        'description': value['description'],
        'id': value['id'],
        'status': EventStatusToJSON(value['status']),
        'created_at': ((value['createdAt']).toISOString()),
    };
}

