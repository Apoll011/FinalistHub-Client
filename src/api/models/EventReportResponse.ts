/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventFinancialReport } from './EventFinancialReport';
import {
    EventFinancialReportFromJSON,
    EventFinancialReportFromJSONTyped,
    EventFinancialReportToJSON,
    EventFinancialReportToJSONTyped,
} from './EventFinancialReport';
import type { TicketSales } from './TicketSales';
import {
    TicketSalesFromJSON,
    TicketSalesFromJSONTyped,
    TicketSalesToJSON,
    TicketSalesToJSONTyped,
} from './TicketSales';
import type { EventStatus } from './EventStatus';
import {
    EventStatusFromJSON,
    EventStatusFromJSONTyped,
    EventStatusToJSON,
    EventStatusToJSONTyped,
} from './EventStatus';
import type { ItemSales } from './ItemSales';
import {
    ItemSalesFromJSON,
    ItemSalesFromJSONTyped,
    ItemSalesToJSON,
    ItemSalesToJSONTyped,
} from './ItemSales';

/**
 * 
 * @export
 * @interface EventReportResponse
 */
export interface EventReportResponse {
    /**
     * 
     * @type {string}
     * @memberof EventReportResponse
     */
    eventId: string;
    /**
     * 
     * @type {string}
     * @memberof EventReportResponse
     */
    eventName: string;
    /**
     * 
     * @type {EventStatus}
     * @memberof EventReportResponse
     */
    status: EventStatus;
    /**
     * 
     * @type {string}
     * @memberof EventReportResponse
     */
    time: string;
    /**
     * 
     * @type {string}
     * @memberof EventReportResponse
     */
    date: string;
    /**
     * 
     * @type {EventFinancialReport}
     * @memberof EventReportResponse
     */
    financialSummary: EventFinancialReport;
    /**
     * 
     * @type {TicketSales}
     * @memberof EventReportResponse
     */
    ticketSales: TicketSales;
    /**
     * 
     * @type {ItemSales}
     * @memberof EventReportResponse
     */
    itemSales: ItemSales;
}



/**
 * Check if a given object implements the EventReportResponse interface.
 */
export function instanceOfEventReportResponse(value: object): value is EventReportResponse {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('eventName' in value) || value['eventName'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('date' in value) || value['date'] === undefined) return false;
    if (!('financialSummary' in value) || value['financialSummary'] === undefined) return false;
    if (!('ticketSales' in value) || value['ticketSales'] === undefined) return false;
    if (!('itemSales' in value) || value['itemSales'] === undefined) return false;
    return true;
}

export function EventReportResponseFromJSON(json: any): EventReportResponse {
    return EventReportResponseFromJSONTyped(json, false);
}

export function EventReportResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventReportResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['event_id'],
        'eventName': json['event_name'],
        'status': EventStatusFromJSON(json['status']),
        'time': json['time'],
        'date': json['date'],
        'financialSummary': EventFinancialReportFromJSON(json['financial_summary']),
        'ticketSales': TicketSalesFromJSON(json['ticket_sales']),
        'itemSales': ItemSalesFromJSON(json['item_sales']),
    };
}

export function EventReportResponseToJSON(json: any): EventReportResponse {
    return EventReportResponseToJSONTyped(json, false);
}

export function EventReportResponseToJSONTyped(value?: EventReportResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'event_id': value['eventId'],
        'event_name': value['eventName'],
        'status': EventStatusToJSON(value['status']),
        'time': value['time'],
        'date': value['date'],
        'financial_summary': EventFinancialReportToJSON(value['financialSummary']),
        'ticket_sales': TicketSalesToJSON(value['ticketSales']),
        'item_sales': ItemSalesToJSON(value['itemSales']),
    };
}

