/* tslint:disable */
/* eslint-disable */
/**
 * Events Management API
 * This API provides comprehensive management of events, including detailed analytics, revenue tracking, rescheduling, cancellations, and insights into capacity and sales performance.
 *
 * The version of the OpenAPI document: 1.4.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TransactionResponse } from './TransactionResponse';
import {
    TransactionResponseFromJSON,
    TransactionResponseFromJSONTyped,
    TransactionResponseToJSON,
    TransactionResponseToJSONTyped,
} from './TransactionResponse';

/**
 * 
 * @export
 * @interface CategoryUsageResponse
 */
export interface CategoryUsageResponse {
    /**
     * 
     * @type {string}
     * @memberof CategoryUsageResponse
     */
    categoryId: string;
    /**
     * 
     * @type {string}
     * @memberof CategoryUsageResponse
     */
    categoryName: string;
    /**
     * 
     * @type {number}
     * @memberof CategoryUsageResponse
     */
    totalTransactions: number;
    /**
     * 
     * @type {number}
     * @memberof CategoryUsageResponse
     */
    totalAmount: number;
    /**
     * 
     * @type {number}
     * @memberof CategoryUsageResponse
     */
    averageAmount: number;
    /**
     * 
     * @type {Date}
     * @memberof CategoryUsageResponse
     */
    lastUsed: Date | null;
    /**
     * 
     * @type {Array<TransactionResponse>}
     * @memberof CategoryUsageResponse
     */
    transactions: Array<TransactionResponse>;
}

/**
 * Check if a given object implements the CategoryUsageResponse interface.
 */
export function instanceOfCategoryUsageResponse(value: object): value is CategoryUsageResponse {
    if (!('categoryId' in value) || value['categoryId'] === undefined) return false;
    if (!('categoryName' in value) || value['categoryName'] === undefined) return false;
    if (!('totalTransactions' in value) || value['totalTransactions'] === undefined) return false;
    if (!('totalAmount' in value) || value['totalAmount'] === undefined) return false;
    if (!('averageAmount' in value) || value['averageAmount'] === undefined) return false;
    if (!('lastUsed' in value) || value['lastUsed'] === undefined) return false;
    if (!('transactions' in value) || value['transactions'] === undefined) return false;
    return true;
}

export function CategoryUsageResponseFromJSON(json: any): CategoryUsageResponse {
    return CategoryUsageResponseFromJSONTyped(json, false);
}

export function CategoryUsageResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryUsageResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'categoryId': json['category_id'],
        'categoryName': json['category_name'],
        'totalTransactions': json['total_transactions'],
        'totalAmount': json['total_amount'],
        'averageAmount': json['average_amount'],
        'lastUsed': (json['last_used'] == null ? null : new Date(json['last_used'])),
        'transactions': ((json['transactions'] as Array<any>).map(TransactionResponseFromJSON)),
    };
}

export function CategoryUsageResponseToJSON(json: any): CategoryUsageResponse {
    return CategoryUsageResponseToJSONTyped(json, false);
}

export function CategoryUsageResponseToJSONTyped(value?: CategoryUsageResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category_id': value['categoryId'],
        'category_name': value['categoryName'],
        'total_transactions': value['totalTransactions'],
        'total_amount': value['totalAmount'],
        'average_amount': value['averageAmount'],
        'last_used': (value['lastUsed'] == null ? null : (value['lastUsed'] as any).toISOString()),
        'transactions': ((value['transactions'] as Array<any>).map(TransactionResponseToJSON)),
    };
}

